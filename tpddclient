#!/usr/bin/env bash
#
# tpddclient.sh - TPDD1 client in (almost) pure bash
# Brian K. White b.kenyon.w@gmail.com
# https://archive.org/details/TandyPortableDiskDriveSoftwareManual26-3808s/

###############################################################################
# config

# verbose/debug
# DEBUG=true ./tpddclient ...
v=0
${DEBUG:-false} && v=1 # 0=normal, 1=verbose

# platform differences
stty_f="-F" TPDD_TTY_PREFIX=ttyUSB # Linux
case "${OSTYPE,,}" in
	*bsd*) stty_f="-f" TPDD_TTY_PREFIX=ttyU ;; # FreeBSD/NetBSD/OpenBSD/etc
	darwin*) stty_f="-f" TPDD_TTY_PREFIX=cu.usbserial- ;; # Mac OSX
esac

# enable hardware flow-control or not
RTSCTS="crtscts"  # "crtscts" to enable, "-crtscts" to disable

# stty flags to set the serial port parameters & tty line discipline & behavior
# don't include "-f/-F filename" here
STTY="19200 raw pass8 -echo clocal cread ${RTSCTS} flusho -drain"

# read timeout in seconds
# current bash can take floating point, old bash may need a whole number
READ_TIMEOUT=0.1

# default tpdd_wait() timout in READ_TIMEOUTs
# wait this long for the drive to start delivering data
# usually needs at least 1.5 seconds
# some commands like format need much lnger
WAIT_TIMEOUT=20

# new bash:  READ_TIMEOUT=0.1 * WAIT_TIMEOUT=20 = 2 seconds
# old bash:  READ_TIMEOUT=1   * WAIT_TIMEOUT=2  = 2 seconds

# Assume any filenames that would fit within 6.2 are "Model T" files,
# and automatically pad them to fill 6.2 the same way "Floppy" does.
# "A.BA" -> "A     .BA" -> "A     .BA               "
# You need to do this to be compatible with Floppy, Flopy2, TS-DOS, etc.
# But the drive doesn't care, and Model T's are not the only users(1).
# So the automatic 6.2 padding can be disabled by setting this to false.
# Even when this is true, if a filename wouldn't fit within 6.2, then it is
# not modified. (1) TANDY WP-2, Brother knitting machines, Cambridge Z-88
FLOPPY_COMPAT=true

###############################################################################
# drive operating modes
typeset -a mode=(
	[0]=fdc		# "FDC mode"
	[1]=opr		# "operation mode"
)

###############################################################################
# "Operation Mode" transactions
#
# request block
#   P preamble  2 bytes       5A5A
#   F format    1 byte        type of request block
#   L length    1 byte        length of data in bytes
#   D data      0-128 bytes   data
#   C checksum  1 byte        1's comp of LSByte of sum of format through data
#
# return block
#   F format    1 byte        type of return block
#   L length    1 byte        length of data in bytes
#   D data      0-128 bytes   data
#   C checksum  1 byte        1's comp of LSByte of sum of format through data

# Operation Mode Request/Return Block Formats
typeset -A opr_fmt=(
	# requests
	[req_dirent]='00'
	[req_open]='01'
	[req_close]='02'
	[req_read]='03'
	[req_write]='04'
	[req_delete]='05'
	[req_format]='06'
	[req_status]='07'
	[req_fdc]='08'
	# returns
	[ret_read]='10'
	[ret_dirent]='11'
	[ret_std]='12'	# open close delete status write error
)

# Operation Mode Error Codes
typeset -A opr_msg=(
	[00]='Operation Complete'
	[10]='File Not Found'
	[30]='Command Parameter or Sequence Error'
	[40]='Read Error 0'
	[41]='Read Error 1'
	[42]='Read Error 2'
	[43]='Read Error 3'
	[44]='Read Error 4'
	[45]='Disk Not Formatted' # 'Read Error 5'
	[46]='Read Error 6'
	[47]='Read Error 7'
	[48]='Read Error 8'
	[49]='Read Error 9'
	[4A]='Read Error A'
	[4B]='Read Error B'
	[4C]='Read Error C'
	[4D]='Read Error D'
	[4E]='Read Error E'
	[4F]='Read Error F'
	[50]='Write-Protected Disk'
	[60]='Disk Full'
	[70]='Disk Insertion Error 0'
	[71]='Disk Not Inserted'      # 'Disk Insertion Error 1'
	[72]='Disk Insertion Error 2'
	[73]='Disk Insertion Error 3'
	[74]='Disk Insertion Error 4'
	[75]='Disk Insertion Error 5'
	[76]='Disk Insertion Error 6'
	[77]='Disk Insertion Error 7'
	[78]='Disk Insertion Error 8'
	[79]='Disk Insertion Error 9'
	[7A]='Disk Insertion Error A'
	[7B]='Disk Insertion Error B'
	[7C]='Disk Insertion Error C'
	[7D]='Disk Insertion Error D'
	[7E]='Disk Insertion Error E'
	[7F]='Disk Insertion Error F'
	[80]='Hardware Fault 0'
	[81]='Hardware Fault 1'
	[82]='Hardware Fault 2'
	[83]='Hardware Fault 3'
	[84]='Hardware Fault 4'
	[85]='Hardware Fault 5'
	[86]='Hardware Fault 6'
	[87]='Hardware Fault 7'
	[88]='Hardware Fault 8'
	[89]='Hardware Fault 9'
	[8A]='Hardware Fault A'
	[8B]='Hardware Fault B'
	[8C]='Hardware Fault C'
	[8D]='Hardware Fault D'
	[8E]='Hardware Fault E'
	[8F]='Hardware Fault F'
)

# Directory Entry Search Forms
typeset -A dirent_cmd=(
	[set_name]=0
	[get_first]=1
	[get_next]=2
)

# File Open Access Modes
typeset -A open_mode=(
	[write]=1
	[append]=2
	[read]=3
)

###############################################################################
# "FDC Mode" transactions
#
# send: C [ ] [P[,P]...] CR
#
# C = command letter, ascii letter
# optional space between command letter and first parameter
# P = parameter (if any), integer decimal value in ascii numbers
# ,p = more parameters if any, seperated by commas, ascii decimal numbers
# CR = carriage return
#
# recv: 8 bytes as 4 ascii hex pairs representing 4 byte values
#
#  1st pair is the error status
#  remaining pairs meaning depends on the command
#
# Some fdc commands have another send-and-receive after that.
# Receive the first response, if the status is not error, then:
#
# send: the data for a sector write
# recv: another standard 8-byte response as above
# or
# send: single carriage-return
# recv: data from a sector read
#

# FDC Mode Commands
typeset -A fdc_cmd=(
	[mode]='M'
	[condition]='D'
	[format]='F'
	[formatnv]='G'
	[readid]='A'
	[readsect]='R'
	[searchid]='S'
	[writeid]='B'
	[writeidnv]='C'
	[writesect]='W'
	[writesectnv]='X'
)

# FDC Mode Errors
typeset -A fdc_msg=(
	[0]="OK"
	[193]="Command Error"
)

###############################################################################
# generic/util

abrt () {
	echo "$0: $@" >&2
	exit 1
}

vecho () {
	((v)) && echo "$@" >&2
}

_sleep () {
	local x
	read -t ${1:-1} -u 4 x
}

# Convert a plain text string to hex pairs stored in hex[]
mk_hex () {
	vecho "${FUNCNAME[0]}($*)"
	local x=$* ;local -i i l=${#x} ;hex=()
	for ((i=0;i<l;i++)) { printf -v hex[i] '%02x' "'${x:i:1}" ; }
	vecho "hex=(${hex[*]})"
}

# Read a local file into hex pairs stored in hex[]
file_to_hex () {
	vecho "${FUNCNAME[0]}($@)"
	local x ;hex=()

	exec 5<"$1"
	while IFS= read -t${READ_TIMEOUT} -r -d $'\0' -n 1 -u 5 x ;do
		printf -v x '%02x' "'$x"
		hex+=($x)
	done
	exec 5<&-

	vecho "bytes read: ${#hex[*]}"
}

###############################################################################
# Main Command Dispatcher
do_cmd () {
	vecho "${FUNCNAME[0]}($@)"
	local -i i ;local s="$@" a=() c ifs=$IFS IFS=';' ;a=($s) IFS=$ifs
	for ((i=0;i<${#a[*]};i++)) {
		set ${a[i]}
		c=$1 ;shift
		err_msg=
		case $c in

	# operation-mode commands
	# All of the drive firmware "operation mode" functions.
	# Most of these are low-level, not used directly by a user.
	# Higher-level commands like ls, load, & save are built out of these.
			dirent) ocmd_dirent ;;
			open) ocmd_open $* ;;
			close) ocmd_close ;;
			read) ocmd_read $* ;;
			write) ocmd_write $* ;;
			ocmd_delete) ocmd_delete ;;
			format) ocmd_format ;;
			stat|status) ocmd_status ;;
			fdc) ocmd_fdc ;;

	# fdc-mode commands
	# All of the drive firmware "FDC mode" functions.
			${fdc_cmd[mode]}|mode) fcmd_mode $* ;; # select operation-mode or fdc-mode
			${fdc_cmd[condition]}|condition) fcmd_condition $* ;; # get drive condition
# name conflict 	#${fdc_cmd[format]}|format) fcmd_format $* ;; # format disk
			#${fdc_cmd[formatnv]}|formatnv) fcmd_formatnv $* ;; # format disk no verify
			#${fdc_cmd[readid]}|readid) fcmd_readid $* ;; # read id
			#${fdc_cmd[readsect]}|readsect) fcmd_readsect $* ;; # read sector
			#${fdc_cmd[searchid]}|searchid) fcmd_searchid $* ;; # search id
			#${fdc_cmd[writeid]}|writeid) fcmd_writeid $* ;; # write id
			#${fdc_cmd[writeidnv]}|writeidnv) fcmd_writeidnv $* ;; # write id no verify
			#${fdc_cmd[writesect]}|writesect) fcmd_writesect $* ;; # write sector
			#${fdc_cmd[writesectnv]}|writesectnv) fcmd_writesectnv $* ;; # write sector no verify

	# local/client commands
	# High-level commands like "ls", and things like "exit"
			ls|dir|list) lcmd_ls "$@" ;;
			rm|del|delete) lcmd_rm "$@" ;;
			load) lcmd_load "$@" ;;
			save) lcmd_save "$@" || vecho "save err=$?" ;;
			sync|drain) tpdd_iosync ;;
			q|quit|bye|exit) exit ;;

	# low level manual raw/debug commands
			com_test) lcmd_com_test ;; # check if port open
			com_open) lcmd_com_open ;; # open the port
			com_close) lcmd_com_close ;; # close the port
			com_read) lcmd_com_read $* ;; # read $1 bytes
			com_write) lcmd_com_write $* ;; # write $* (hex pairs)
			com_ret) lcmd_com_ret ;; # read a return packet
			com_req) lcmd_com_req $* ;; # write a request packet
			sum) calc_cksum $* ;;

	# playground
			# send the TPDD1 bootstrap S-records
			tpdd1_boot) lcmd_tpdd1_boot ;;

			'') : ;;
			*) echo "Unknown command: \"$c\"" >&2 ;;
		esac
		((${#err_msg})) && echo "$c:$err_msg" >&2
	}
}

###############################################################################
# experimental junk

lcmd_tpdd1_boot () {
	local x=
	mk_hex "S10985157C00AD7EF08B3AS901FE"
	tpdd_write ${hex[*]} 0d
	while tpdd_read 1 ;do x+=" ${rdh[*]}" ;done
	printf '%b' "\x${x// /\\x}"
}

###############################################################################
# serial port operations

get_tpdd_port () {
	local x=(/dev/${TPDD_TTY_PREFIX#/dev/}*)
	[[ "${x[0]}" == "/dev/${TPDD_TTY_PREFIX}*" ]] && x=(/dev/tty*)
	((${#x[*]}==1)) && { PORT=${x[0]} ;return ; }
	local PS3="Which serial port is the TPDD drive on? "
	select PORT in ${x[*]} ;do [[ -c "$PORT" ]] && break ;done
}

test_com () {
	{ true >&3 ; } 2>&-
}

open_com () {
	test_com && return
	exec 3<>"${PORT}"
	stty ${stty_f} "${PORT}" ${STTY}
	test_com || abrt "Failed to open serial port \"${PORT}\""
}

close_com () {
	exec 3>&-
}

###############################################################################
# TPDD communication

# write $* to com port as binary
tpdd_write () {
	vecho "${FUNCNAME[0]}($*)"
	local x=$* ;rdh=()
	printf '%b' "\x${x// /\\x}" >&3
}

# read $1 bytes from com port
# store each byte as a hex pair in rdh[]
# deep brute force magic here to actually read null bytes
# (we're not actually reading or storing nulls, but we are *detecting* them and recording where they were)
# Thanks to Andrew Ayers in the M100 group on Facebook for help finding the key trick.
#
# return values from "read"
# $?=0 = we read a non-null byte normally
#    1 = we read a null byte, $x is empty because the null was eaten as a delimiter
#  142 = we timed out, $x is empty because there was no data, not a null byte
tpdd_read () {
	vecho -n "${FUNCNAME[0]}($@) :"
	local -i i l=$1 ;local x ;rdh=() read_err=0
	vecho -n " l=$l "
	tpdd_wait
	for ((i=0;i<l;i++)) {
		vecho -n " $i:"
		x= rdh[i]='00'
		((read_err)) && { vecho -n "XX" ; continue ; }
		IFS= read -t ${READ_TIMEOUT} -r -d $'\0' -n 1 -u 3 x ;read_err=$?
		(($read_err>1)) || read_err=0
		printf -v rdh[i] '%02x' "'$x"
		vecho -n "${rdh[i]}"
	}
	vecho " read_err:$read_err"
}

# check if data is available without consuming any
tpdd_check () {
	IFS= read -t 0 -u 3
}

# wait for data
tpdd_wait () {
	vecho -n "${FUNCNAME[0]}($@):"
	local -i i=-1 t=${1:-${WAIT_TIMEOUT}}
	until ((++i>t)) ;do
		tpdd_check && break
		_sleep ${READ_TIMEOUT}
	done
	vecho "$i"
}

# Drain any pending output from the drive.
# Read and discard bytes one at a time until hitting a read timeout.
tpdd_iosync () {
	vecho "${FUNCNAME[0]}($@)"
	while tpdd_check ;do tpdd_read 1 ;done
	rdh=()
}

###############################################################################
# "Operation Mode" helper functions

# calculate the checksum of $* (hex pairs)
# return in global $cksum (hex pair)
calc_cksum () {
	vecho -n "${FUNCNAME[0]}($*) :"
	local -i s=0
	while (($#)) ;do ((s+=16#$1)) ;shift ;done
	s=$(((s&255)^255))
	printf -v cksum '%02x' $s
	vecho "$cksum"
}

# verify the checksum of a received packet
# $* = data data data... csum  (hex pairs)
verify_checksum () {
	vecho "${FUNCNAME[0]}($*)"
	local -i l=$(($#-1)) ;local x= h=($*)
	x=${h[l]} ;h[l]=
	calc_cksum ${h[*]}
	vecho "received: \"$x\""
	vecho "computed: \"$cksum\""
	[[ "$x" == "$cksum" ]]
}

# check if the current operation-mode response is an error response
# return true if error, false if not error
# (so everything in here looks backwards)
ck_ocmd_err () {
	[[ "$ret_fmt" == "${opr_fmt[ret_std]}" ]] || return 1
	((${#ret_dat[*]}==1)) || { echo "Corrupt Response" >&2 ;return 0 ; }
	err_msg+=" ${opr_msg[${ret_dat[0]}]}"
	drive_err=$((16#${ret_dat[0]}))
	vecho -n "${ret_dat[0]} : "
	#(($drive_err)) && echo "$err_msg" >&2
}

# check if "format 12h" response was ok (00) or error
ck_ret_ok () {
	vecho "fmt=$ret_fmt len=$ret_len dat=(${ret_dat[*]}) read_err=\"$read_err\""
	((${#ret_dat[*]}==1)) || { echo "Bad Response" ; ret_dat=() ;return 1 ; }
	vecho -n "${ret_dat[0]} : "
	((16#${ret_dat[0]})) && echo "${opr_msg[${ret_dat[0]}]}" >&2 || vecho
}

# build a valid operation-mode request block from $1=fmt and $*=data
# 5a 5a $1 len $* cksum
# and send it to the tpdd
ocmd_send_req () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	local fmt=$1 len ;shift
	printf -v len '%02x' $#
	calc_cksum $fmt $len $*
	vecho "fmt=\"$fmt\" len=\"$len\" dat=\"$*\" sum=\"$cksum\""
	tpdd_write 5a 5a $fmt $len $* $cksum
}

# read an operation-mode return block from the tpdd
# parse it into the parts: format, length, data, checksum
# verify the checksum
# return the globals ret_fmt=format, ret_len=length, rdh[]=data
ocmd_read_ret () {
	vecho "${FUNCNAME[0]}($@)"
	local -i t ;local l x ;ret_fmt= ret_len= ret_dat=() ret_sum=

	# read 2 bytes (fmt len)
	tpdd_read 2
	vecho "(fmt len):(${rdh[*]})"
	((${#rdh[*]}==2)) || return 1
	case "${rdh[0]}" in
		10|11|12) ret_fmt=${rdh[0]} ret_len=${rdh[1]} ;;
	#	00) continue ;;
		*) rdh=() ;return 2 ;;
	esac

	# read <length> bytes (data)
	l=$((16#$ret_len))
	tpdd_read $l
	((${#rdh[*]}==l)) || return 3
	ret_dat=(${rdh[*]})
	vecho "data=(${ret_dat[*]})"

	# read 1 byte (checksum)
	tpdd_read 1
	((${#rdh[*]}==1)) || return 4
	ret_sum=${rdh[0]}
	vecho "cksum=$ret_sum"

	# compute our own checksum and verify it matches the supplied checksum
	verify_checksum $ret_fmt $ret_len ${ret_dat[*]} $ret_sum || { echo "CHECKSUM FAILED" >&2 ; return 5 ; }
}

###############################################################################
# TPDD "Operation Mode" commands

# directory entry
# fmt = 00
# len = 1a
# filename = 24 bytes
# attribute = "F" (always)
# search form = 00=set_name | 01=get_first | 02=get_next
ocmd_dirent () {
	vecho "${FUNCNAME[0]}($@)"
	local x t f="$1" m=${3:-${dirent_cmd[get_first]}}
	drive_err= file_name= file_attr= file_len= free_sectors=
	((operation_mode)) || fcmd_mode 1

	# In "Floppy Compatible" mode, if doing set_name, and the filename
	# is 6.2 or less, then space-pad to fill 6.2: "A.CO" -> "A     .CO"
	$FLOPPY_COMPAT && [[ "$m" == "${dirent_cmd[set_name]}" ]] && {
		t=${1%.*} x=${1##*.}
		((${#t})) && ((${#t}<7)) && ((${#x}<3)) && printf -v f '%-6s.%2s' "$t" "$x"
	}

	# construct the request
	printf -v x '%-24.24s' "$f" ;mk_hex "$x"	# filename
	printf -v hex[24] '%02x' "'${2:-F}"		# attribute - always "F"
	printf -v hex[25] '%02x' $m			# search form

	# send the request
	ocmd_send_req ${opr_fmt[req_dirent]} ${hex[*]} || err_msg+=" ${FUNCNAME[0]}:ocmd_send_req"

	# read the response
	ocmd_read_ret || err_msg+=" ${FUNCNAME[0]}:ocmd_read_ret"

	# check if the response was an error
	ck_ocmd_err && { err_msg+=" ${FUNCNAME[0]}:ck_ocmd_err" ;return 1 ; }

	# sanity check the normal response
	[[ "$ret_fmt" == "${opr_fmt[ret_dirent]}" ]] || { err_msg+=" ${FUNCNAME[0]}:Corrupt Return" ;return 1 ; }
	((${#ret_dat[*]}==28)) || { err_msg+=" ${FUNCNAME[0]}:Corrupt Return" ;return 1 ; }

	# parse the normal response
	free_sectors=$((16#${ret_dat[27]})) ;ret_dat[27]=
	file_len=$((16#${ret_dat[25]} * 256 + 16#${ret_dat[26]})) ;ret_dat[26]= ret_dat[25]=
	x="\x${ret_dat[24]}" ;ret_dat[24]= ;printf -v file_attr '%b' "$x"
	x=(${ret_dat[*]}) ;x="${x[*]}" ;printf -v file_name '%-24.24b' "\x${x// /\\x}"

	vecho "${FUNCNAME[0]} m=$m f=$file_name l=$file_len"
	# if first byte of filename is 00, then there are no more files
	[[ ${ret_dat[0]} == '00' ]] && return 1 || return 0
}

# Get Drive Status
# request: 5a 5a 07 00 ##
# return : 07 01 ?? ##
ocmd_status () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	ocmd_send_req ${opr_fmt[req_status]}
	ocmd_read_ret
	ck_ret_ok
}

# Format Disk
#request: 5a 5a 06 00 ##
#return : 12 01 ?? ##
ocmd_format () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1

	echo "Formatting disk..."
	ocmd_send_req ${opr_fmt[req_format]}
	tpdd_wait 1200	# takes 100 seconds, allow 120

	ocmd_read_ret
	ck_ret_ok
}

# switch to FDC mode
ocmd_fdc () {
	ocmd_send_req ${opr_fmt[req_fdc]}
	operation_mode=0
}

# Open File
# request: 5a 5a 01 01 MM ##
# return : 12 01 ?? ##
# MM = access mode: 01=write_new, 02=write_append, 03=read
ocmd_open () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	local mode ;printf -v mode '%02x' $1
	ocmd_send_req ${opr_fmt[req_open]} $mode	# open the file
	ocmd_read_ret
	ck_ret_ok
}

# Close File
# request: 5a 5a 02 00 ##
# return : 12 01 ?? ##
ocmd_close () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	ocmd_send_req ${opr_fmt[req_close]}
	ocmd_read_ret
	ck_ret_ok
}

# Delete File
# request: 5a 5a 05 00 ##
# return : 12 01 ?? ##
ocmd_delete () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	ocmd_send_req ${opr_fmt[req_delete]}
	tpdd_wait 100	# takes ~5 seconds, allow 10
	ocmd_read_ret
	ck_ret_ok
}

# Read File data
# request: 5a 5a 03 00 ##
# return : 10 00-80 1-128bytes ##
ocmd_read () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	ocmd_send_req ${opr_fmt[req_read]}
	ocmd_read_ret
	vecho "fmt=$ret_fmt len=$ret_len dat=(${ret_dat[*]}) read_err=\"$read_err\""

	# check if the response was an error
	ck_ocmd_err && return 5

	# sanity check
	[[ "$ret_fmt" == "${opr_fmt[ret_read]}" ]] || return 4

	# return true or not based on data or not
	((${#ret_dat[*]}))
}

# Write File Data
# request: 5a 5a 04 ?? 1-128 bytes ##
# return : 12 01 ?? ##
ocmd_write () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) || fcmd_mode 1
	(($#)) || return 128
	ocmd_send_req ${opr_fmt[req_write]} $* || return 129
	#tpdd_wait 100

	# manual says no return block is sent unless there's an error
	tpdd_check || return 0

	vecho "return block detected after write"
	ocmd_read_ret ; vecho "ocmd_read_ret() err=$?"
	ck_ret_ok
}

###############################################################################
# "FDC Mode" helper functions

# read an FDC-mode 8-byte result packet
fcmd_read_result () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) && ocmd_fdc
	local -i i ;local x ;fdc_err= fdc_res= fdc_len= fdc_res_b=()

	# read 8 bytes
	tpdd_read 8

	# re-constitute the 8 hex pairs from tpdd_write(), back to the original
	# 8 ascii characters sent by the drive
	x="${rdh[*]}" ;printf -v x '%b' "\x${x// /\\x}"
	vecho "$x"

	# the 8 characters sent by the drive are themselves hex pairs,
	# representing integer values not ascii characters in this case
	fdc_err=$((16#${x:0:2})) # first 2 status
	fdc_res=$((16#${x:2:2})) # next 2  result
	fdc_len=$((16#${x:4:4})) # last 4  length

	# look up the error message for fdc_err if not 0
	((v)) && {
		x='OK'
		((fdc_err)) && {
			x='ERROR'
			[[ "${fdc_msg[fdc_err]}" ]] && x="${fdc_msg[fdc_err]}"
			err_msg+=" $x"
		}
		vecho -n "status: $fdc_err - $x"
	}

	# fdc_result is 8 individual bits
	# convert to an array for convenience
	fdc_result_b=()
	for ((i=7;i>=0;i--)) { fdc_result_b+=(${D2B[fdc_res]:i:1}) ; }

	return $fdc_err
}

###############################################################################
# TPDD "FDC Mode" commands

# select operation mode
# $1 0=fdc 1=operation
fcmd_mode () {
	vecho "${FUNCNAME[0]}($@)"
	(($#)) || return
	mk_hex "${fdc_cmd[mode]}$1"
	tpdd_write ${hex[*]} 0d
	operation_mode=$1
}

fcmd_condition () {
	vecho "${FUNCNAME[0]}($@)"
	((operation_mode)) && ocmd_fdc
	local -i ;local x
	mk_hex "${fdc_cmd[condition]}"
	tpdd_write ${hex[*]} 0d

	fcmd_read_result
	((fdc_status)) && return $fdc_status

	# result bit 7 - disk not inserted
	x= ;((fdc_result_b[7])) && x=' Not'
	echo -n "Disk${x} Inserted"
	((fdc_result_b[7])) && { echo ;return ; }

	# result bit 5 - disk write-protected
	x='Writable' ;((fdc_result_b[5])) && x='Write-protected'
	echo ", $x"
}

###############################################################################
# local/client high-level commands

# list all files
lcmd_ls () {
	vecho "${FUNCNAME[0]}($@)"
	local -i dirent_mode=${dirent_cmd[get_first]} i= ;local f x ;ret_dat=()

	while ((i++<40)) ;do
		ocmd_dirent '' '' $dirent_mode || break

		# If in "Floppy Compatible" mode, and it looks like a
		# "Model T" filename, then collapse the internal spaces.
		$FLOPPY_COMPAT && {
			f=${file_name// /} ;x=${f##*.} ;f=${f%.*}
			((${#f})) && ((${#f}<7)) && ((${#x}<3)) && printf -v file_name '%s.%s' "$f" "$x"
		}

		printf '%-24.24b %6u\n' "$file_name" "$file_len"
		((dirent_mode==${dirent_cmd[get_first]})) && dirent_mode=${dirent_cmd[get_next]}
	done
}

# load a file (copy a file from tpdd to local fs)
lcmd_load () {
	vecho "${FUNCNAME[0]}($@)"
	local x
	[[ "$1" ]] || return 1
	ocmd_dirent "$1" '' ${dirent_cmd[set_name]}	# set the filename
	ocmd_open ${open_mode[read]}			# open the file for reading
	>"$1"						# start the local file
	while ocmd_read ;do				# read a block of data from tpdd
		x="${ret_dat[*]}"
		printf '%b' "\x${x// /\\x}" >> "$1"	# write the block of data to local file
		((16#$ret_len<128)) && break
	done
	ocmd_close					# close the file
}

# save a file (copy from local fs to disk)
lcmd_save () {
	vecho "${FUNCNAME[0]}($@)"
	local -i i n p= e ;local x=
	[[ "$1" ]] || return 1
	ocmd_dirent "$1" '' ${dirent_cmd[set_name]} || return 2	# set the filename
	ocmd_open ${open_mode[write]} || return 3		# open the file for write(new)
	file_to_hex "$1" || return 4				# read the local file into hex[]
	while ((${#hex[*]})) ;do
		vecho "packet:$((++p)) start #hex=${#hex[*]}"
		x= n=${#hex[*]}
		((n>128)) && n=128
		for ((i=0;i<n;i++)) {
			x+=" ${hex[i]}"
			hex[i]=
		}
		hex=(${hex[*]})
		vecho "packet:$p end #hex=${#hex[*]}"
		ocmd_write $x
		e=$? ;((e)) && {
			vecho "ocmd_write() err=$e"
			return $((e+64))
		}
	done
}

lcmd_rm () {
	vecho "${FUNCNAME[0]}($@)"
	[[ "$1" ]] || return 1
	ocmd_dirent "$1" '' ${dirent_cmd[set_name]}	# set the filename
	ocmd_delete
}

###############################################################################
# manual/raw debug commands

lcmd_com_test () {
	test_com && echo "com is open" || echo "com is closed"
}

lcmd_com_open () {
	open_com
	lcmd_com_test
}

lcmd_com_close () {
	close_com
	lcmd_com_test
}

lcmd_com_read () {
	tpdd_read $1
	printf '%s\n' "${rdh[@]}"
}

lcmd_com_write () {
	tpdd_write $*
}

lcmd_com_ret () {
	ocmd_read_ret
	printf '%s\n' "${ret_dat[@]}"
}

lcmd_com_req () {
	ocmd_send_req $*
}

###############################################################################
# Main
typeset -a hex=() rdh=() ret_dat=() fdc_res_b=()
typeset -i operation_mode=1 read_err= fdc_err= fdc_res= fdc_len=
cksum=00 ret_fmt= ret_len= ret_sum= err_msg=
readonly LANG=C D2B=({0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1})

# for _sleep()
sleep_fifo=/tmp/.${0//\//_}.$$.sleep.fifo
trap "rm -f $sleep_fifo" EXIT
mkfifo $sleep_fifo || abrt "Error creating sleep fifo $sleep_fifo"
exec 4<>$sleep_fifo

# tpdd serial port
PORT="/dev/${1#/dev/}" ;[[ -c "$PORT" ]] && shift || get_tpdd_port
vecho "Using port \"$PORT\""
open_com

# non-interactive mode
(($#)) && { do_cmd "$@" ; exit ; }

# interactive mode
while read -p"TPDD(${mode[operation_mode]})>" x ;do do_cmd "$x" ;done
