
usage / help

scan self for specially formatted comments

----

Replace TPDD1 "mv" with one that edits the FCB instead of load>rm>save.

It might not be much faster, because it would still be doing at least one
read-logical & write-logical, maybe a whole read-physical & write-physical.

Another point against is it risks all files since you have to overwrite
the entire FCB table, while deleting and saving a file only risks that file.

But the option should still exist because why not?.
We have the read_fcb routine now to start from.

It would definitely be significantly faster for large files. Even merely
deleting a large file without the load or save takes a long time because
it causes the drive to have to edit a lot of sector IDs and FCBs. Plus
of course load and save each take a long time for a large file.

----

load/save/rr/rd in chunks instead of entire files / entire disks to ram

open a local file for reading or writing with a file descriptor <> redirect
and read/write the individual 128-byte chunks as they come.

point would be to avoid needing 600Kbyte variables (200k for an entire
tpdd2 disk, X2 from the hex encoding, plus probably at least one more byte
per array element for a null terminator internal to bash.)

----

Figure out some better more consistent way to manage the overlapping
flags/states/options currently controlled or affected by
$ppd2 $MODEL_DETECTION $TPDD_MODEL $FDC_MODE $operation_mode $mode[]

For one thing, seperate and/or clarify these roles more consistently:
- buitlt-in ultimate fallback defaults
- user config settings
- state tracking
- behavior controlling

----

Disk Info

Examine the disk to report some basic info about it.
Is it a filesystem disk or a raw data disk or not formatted at all?
What logical sector size? Probably a single read of the FCB sector
should answer most of that in one shot.

----

Try to figure out a more reliable init process

fonzie_smack() fails to handle the case where the drive has been
configured with the dip switches to power up in FDC mode.
The point of fonzie_smack() is exactly to handle the case where the
drive might have been previously left in FDC-mode by some other software.

There is no way to query the drive to ask "hey what mode are you in?".
And there is no command that is always safe to say "hey whatever mode you're
in right now, switch to -this- mode now"

So TS-DOS does a flip-flop cycle that relies on one command while in one mode
happening to more or less harmlessly ignore unrecognized input, and being able
to ignore any error generated by another command in another mode, so that, you
start off not knowing what state the drive might be in, and you don't know
what commands would be valid or how it will react to any commands you give it,
but you do know the range of possible reactions for these two commands, and
you do know that by the end of the set A > B > A process that you should be
left in state A.

Well nice theory but it doesn't seem to be working.

----

auto baud detect?

----

TS-DOS / DeskLink directories

----

